apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  annotations:
    alpha.image.policy.openshift.io/resolve-names: '*'
    app.openshift.io/route-disabled: "false"
    app.openshift.io/vcs-uri: {{ coalesce .Values.applicationGitUrl "https://github.com/gmodzelewski/nodejsdockerpipeline.git" }}
    secret.reloader.stakater.com/reload: "nodejsdockerpipeline"
  labels:
    app: nodejsdockerpipeline
    app.kubernetes.io/component: nodejsdockerpipeline
    app.kubernetes.io/instance: nodejsdockerpipeline
    app.kubernetes.io/name: nodejsdockerpipeline
    app.kubernetes.io/part-of: wind-turbine
    app.openshift.io/runtime: quarkus
  name: nodejsdockerpipeline
spec:
  replicas: 5
  revisionHistoryLimit: 10
  selector:
    app: nodejsdockerpipeline
  strategy:
    activeDeadlineSeconds: 21600
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - nodejsdockerpipeline
        from:
          kind: ImageStreamTag
          name: nodejsdockerpipeline:{{ .Values.imageTag | default .Chart.AppVersion }}
          namespace: {{ .Release.Namespace }}
  template:
    metadata:
      labels:
        app: nodejsdockerpipeline
      annotations:
        sidecar.istio.io/inject: 'true'
    spec:
      containers:
      - env:
        - name: QUARKUS_PROFILE
          value: openshift-cluster
        image: {{ include "app.image" . }}
        imagePullPolicy: IfNotPresent
        name: nodejsdockerpipeline
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8443
          protocol: TCP
        resources: {}
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /q/health/ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 3
          successThreshold: 1	
          timeoutSeconds: 1
        livenessProbe:
          httpGet:
            scheme: HTTP
            path: /q/health/live
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 3
          successThreshold: 1	
          timeoutSeconds: 1
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
